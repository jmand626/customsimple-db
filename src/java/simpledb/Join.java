package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    // From the constructor we need a predicate and our two child iterators, and a tupledesc from the getter
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc td;

    // We also need an tuple object to know where we are during the join
    private Tuple currJoinTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;

        // We want to merge the field descriptors in our joins to get the descriptors for the joined tables
        this.td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        // Remember, if you look at JoinPredicate it has two field names that we can use, but to get to them
        // we need to dive into our tupledesc for the getFieldName method
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
        // Like filter, nice and simple
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();

        currJoinTuple = null;
        // This would have been valid at some point if we are now calling close
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        currJoinTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // First check to see if we can even get any more values from our iterators:
        if (currJoinTuple == null || !child2.hasNext()){
            if(!child1.hasNext()) return null;
            // Are we able to properly join with our iterators

            currJoinTuple = child1.next();
            // Are we able to properly join with our iterators!! If so, then go!!!!!!!
            child2.rewind();
            // Reset if need be, since we go through all of child2 for each value in child1
        }

        while (child2.hasNext()) {
            Tuple curr = child2.next();
            // Store the next tuple given, useful to check it through the filter

            if (p.filter(currJoinTuple, curr)) {
                Tuple merge = new Tuple(td);

                int innerLoopCount = currJoinTuple.getTupleDesc().numFields();
                for (int i = 0; i < innerLoopCount; i++) {
                    // Looping through the tuple we got from child1 out above outside of the while loop, counting fields
                    // and setting fields in our a new right field set
                    merge.setField(i, currJoinTuple.getField(i));
                }
                // We put the inner loop tuples first by convention

                for (int j = 0; j < curr.getTupleDesc().numFields(); j++) {
                    // So now instead we loop through the tuples received from curr, clearly from child2
                    // And we can therefore get fields from it too for our merged tuple
                    merge.setField(j + innerLoopCount, curr.getField(j));
                }
                return merge;
                // Remember, only one tuple!
            }
        }
        // Still need to return something here if we couldnt something above with the inner loop
        currJoinTuple = null;

        // Continue on
        return fetchNext();
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
        // Pretty intuitive
    }

}
